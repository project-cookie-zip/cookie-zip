// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id                 Int         @id @default(autoincrement())
  email              String?     @unique
  name               String
  avatar             String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  token              Token[]
  videos             Video[]
  comments           Comment[]
  likes              Like[]
  sendSubscribes     Subscribe[] @relation(name: "sendSubscribes")
  receivedSubscribes Subscribe[] @relation(name: "receivedSubscribes")
}

model Token {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Video {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  title        String
  description  String?   @db.MediumText
  videoUrl     String
  thumbnailUrl String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userId       Int
  comments     Comment[]
  likes        Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.MediumText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId   Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId   Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model Subscribe {
  id           Int  @id @default(autoincrement())
  createdBy    User @relation(name: "sendSubscribes", fields: [createdById], references: [id])
  createdFor   User @relation(name: "receivedSubscribes", fields: [createdForId], references: [id])
  createdById  Int
  createdForId Int
}
